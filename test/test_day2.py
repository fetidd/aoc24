import pytest
from ..src.day2 import Day2, cmp

def test_main():
    data = "7 6 4 2 1\n1 2 7 8 9\n9 7 6 2 1\n1 3 2 4 5\n8 6 4 4 1\n1 3 6 7 9"
    assert Day2().main(data.split("\n")) == 2 # part a
    # assert Day2().main(data.split("\n")) == 4 # part b

@pytest.mark.parametrize(
    "a, b, expected",
    [
        (1, 2, -1),
        (1, 3, -1),
        (1, 4, -1),
        (1, 5, 0),
        (2, 1, 1),
        (3, 1, 1),
        (4, 1, 1),
        (5, 1, 0),
        (2, 2, 0),
    ]
)
def test_cmp(a, b, expected):
    assert expected == cmp(a, b)


@pytest.mark.parametrize(
    "report_line, expected", 
    [
        ("7 6 4 2 1", 1),
        ("1 2 7 8 9", 0),
        ("9 7 6 2 1", 0),
        ("1 3 2 4 5", 0), # safe in part b
        ("8 6 4 4 1", 0), # safe in part b
        ("1 3 6 7 9", 1),

        # FOR PART B
        # from reddit
        # ("19 23 24 27 29", 1),
        # ("23 19 24 27 29", 1),
    
        # # extra tests
        # ("1 2 3 4 5", 1),
        # ("99 2 3 4 5", 1),
        # ("1 99 3 4 5", 1),
        # ("1 2 99 4 5", 1),
        # ("1 2 3 99 5", 1),
        # ("1 2 3 4 99", 1),

    
        # ("1 3 5 7 9", 1),
        # ("99 3 5 7 9", 1),
        # ("1 99 3 5 7", 1),
        # ("1 3 99 5 7", 1),
        # ("1 3 5 99 7", 1),
        # ("1 3 5 7 99", 1),

    
        # ("1 4 7 10 13", 1),
        # ("99 4 7 10 13", 1),
        # ("1 99 4 7 10", 1),
        # ("1 4 99 7 10", 1),
        # ("1 4 7 99 10", 1),
        # ("1 4 7 10 99", 1),

    
        # ("5 4 3 2 1", 1),
        # ("99 4 3 2 1", 1),
        # ("5 99 3 2 1", 1),
        # ("5 4 99 2 1", 1),
        # ("5 4 3 99 1", 1),
        # ("5 4 3 2 99", 1),

    
        # ("9 7 5 3 1", 1),
        # ("99 7 5 3 1", 1),
        # ("9 99 7 5 3", 1),
        # ("9 7 99 5 3", 1),
        # ("9 7 5 99 3", 1),
        # ("9 7 5 3 99", 1),

    
        # ("13 10 7 4 1", 1),
    
        # ("99 10 7 4 1", 1),
        # ("13 99 10 7 4", 1),
        # ("13 10 99 7 4", 1),
        # ("13 10 7 99 4", 1),
        # ("13 10 7 4 99", 1),

        # ("9 10 7 4 1", 1),
        # ("13 12 10 7 4", 1),
        # ("13 10 7 8 5", 1),
        # ("13 10 7 4 5", 1),

        # ("9 10 11 10 9", 0),
        # ("12 10 11 10 9", 1),
    
        # ("99 10 7 4 99", 0),
        # ("13 99 10 7 99", 0),
        # ("13 10 99 7 99", 0),
        # ("13 10 7 99 99", 0),
        # ("99 10 7 4 99", 0),

        # ("99 99 7 4 1", 0),
        # ("7 99 99 4 1", 0),
        # ("7 4 99 99 1", 0),
        # ("7 4 1 99 99", 0),
    
    ]
)
def test_check_report_line(report_line, expected):
    day = Day2()
    assert expected == day.check_report_line([int(x) for x in report_line.split(" ")])
